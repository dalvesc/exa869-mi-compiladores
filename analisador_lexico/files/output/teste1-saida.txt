Tokens: 

1 CoM /*
130 CoM */
132 PRE var
132 DEL {
133 PRE int
133 IDE teste
133 DEL [
133 NRO 1
133 DEL ]
133 DEL [
133 NRO 2
133 DEL ]
133 DEL ;
134 PRE string
134 IDE teste2
134 DEL [
134 IDE a
134 DEL ]
134 DEL ;
135 PRE string
135 IDE nome
135 REL =
135 CAC "maria"
135 DEL ;
136 PRE int
136 IDE idade
136 DEL ,
136 IDE numero
136 DEL ;
137 PRE real
137 IDE numero_real
137 DEL ;
138 PRE boolean
138 IDE teste
138 DEL ;
139 DEL }
141 PRE const
141 DEL {
142 PRE string
142 IDE nome
142 DEL ;
143 PRE int
143 IDE idade
143 DEL ,
143 IDE numero
143 DEL ;
144 PRE real
144 IDE numero_real
144 DEL ;
145 PRE boolean
145 IDE teste
145 DEL ;
146 DEL }
148 PRE struct
148 IDE ex
148 DEL {
149 PRE int
149 IDE a
149 DEL ;
150 DEL }
152 PRE function
152 PRE int
152 IDE nome_funcao
152 DEL (
152 PRE int
152 IDE p1
152 DEL ,
152 PRE string
152 IDE p1
152 DEL )
152 DEL {
153 PRE print
153 DEL (
153 NRO 1
153 DEL )
153 DEL ;
154 PRE return
154 NRO 1
154 DEL ;
155 DEL }
156 CoM //
158 PRE start
158 DEL {
159 IDE teste
159 REL =
159 PRE false
159 DEL ;
160 IDE idade
160 REL =
160 NRO 1
160 ART +
160 IDE teste
160 DEL ;
161 IDE idade
161 REL =
161 IDE nome_funcao
161 DEL (
161 IDE idade
161 DEL ,
161 IDE nome
161 DEL )
161 DEL ;
162 CoM /*
162 CoM */
163 PRE read
163 DEL (
163 IDE nome
163 DEL )
163 DEL ;
164 PRE print
164 DEL (
164 CAC "Digite a idade"
164 DEL )
164 DEL ;
165 PRE read
165 DEL (
165 IDE idade
165 DEL )
165 DEL ;
167 IDE invalida
167 DEL (
167 DEL )
167 DEL ;
169 PRE if
169 DEL (
169 IDE idade
169 REL >=
169 NRO 150
169 DEL )
169 PRE then
169 DEL {
170 PRE print
170 DEL (
170 CAC "pode aposentar kkkk"
170 DEL )
170 DEL ;
171 DEL }
171 PRE else
171 DEL {
172 PRE print
172 DEL (
172 CAC "vai trabalhar"
172 DEL )
172 DEL ;
173 DEL }
174 CAC "vai"
176 CAC ""
177 DEL }
