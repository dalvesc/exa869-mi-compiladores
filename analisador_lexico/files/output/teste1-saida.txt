Tokens: 

1 CoM /*
130 CoM */
132 PRE var
132 DEL {
133 PRE int
133 IDE teste
133 DEL [
133 NRO 1
133 DEL ]
133 DEL [
133 NRO 2
133 DEL ]
133 DEL ;
134 PRE string
134 IDE teste2
134 DEL [
134 IDE a
134 DEL ]
134 DEL ;
135 PRE string
135 IDE nome
135 REL =
135 CAC "maria"
135 DEL ;
136 PRE int
136 IDE idade
136 DEL ,
136 IDE numero
136 DEL ;
137 PRE real
137 IDE numero_real
137 DEL ;
138 PRE boolean
138 IDE teste
138 DEL ;
139 DEL }
142 PRE const
142 DEL {
143 PRE string
143 IDE nome
143 REL =
143 CAC "joao"
143 DEL ;
144 PRE int
144 IDE idade
144 REL =
144 NRO 10
144 DEL ,
144 IDE numero
144 DEL ;
145 PRE real
145 IDE numero_real
145 REL =
145 NRO 2
145 DEL ;
146 PRE boolean
146 IDE teste
146 REL =
146 PRE true
146 DEL ;
147 DEL }
149 PRE struct
149 IDE textp
149 DEL {
150 PRE int
150 IDE a
150 DEL ;
151 DEL }
153 PRE function
153 PRE int
153 IDE nome_funcao
153 DEL (
153 PRE int
153 IDE p1
153 DEL ,
153 PRE string
153 IDE p1
153 DEL )
153 DEL {
154 PRE print
154 DEL (
154 NRO 1
154 DEL )
154 DEL ;
155 PRE return
155 NRO 1
155 DEL ;
156 DEL }
157 CoM //
159 PRE start
159 DEL {
160 IDE teste
160 REL =
160 PRE false
160 DEL ;
161 IDE idade
161 REL =
161 NRO 1
161 ART +
161 IDE teste
161 DEL ;
162 IDE idade
162 REL =
162 IDE nome_funcao
162 DEL (
162 IDE idade
162 DEL ,
162 IDE nome
162 DEL )
162 DEL ;
163 CoM /*
163 CoM */
164 PRE read
164 DEL (
164 IDE nome
164 DEL )
164 DEL ;
165 PRE print
165 DEL (
165 CAC "Digite a idade"
165 DEL )
165 DEL ;
166 PRE read
166 DEL (
166 IDE idade
166 DEL )
166 DEL ;
168 IDE invalida
168 DEL (
168 DEL )
168 DEL ;
170 PRE if
170 DEL (
170 IDE idade
170 REL >=
170 NRO 150
170 DEL )
170 PRE then
170 DEL {
171 PRE print
171 DEL (
171 CAC "pode aposentar kkkk"
171 DEL )
171 DEL ;
172 DEL }
172 PRE else
172 DEL {
173 PRE print
173 DEL (
173 CAC "vai trabalhar"
173 DEL )
173 DEL ;
174 DEL }
175 CAC "vai"
177 CAC ""
178 DEL }
